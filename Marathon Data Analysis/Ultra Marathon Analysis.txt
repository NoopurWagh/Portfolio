{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7320c613-0659-478a-8cfa-798b034d99ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "84fc100f-68ed-46df-b5e6-9e3ff017fc21",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\noopu\\AppData\\Local\\Temp\\ipykernel_25416\\409619065.py:1: DtypeWarning: Columns (11) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df=pd.read_csv(r'C:\\Users\\noopu\\Desktop\\START_FRESH\\Projects\\Python\\Marathon Analysis\\TWO_CENTURIES_OF_UM_RACES.csv', encoding='unicode_escape')\n"
     ]
    }
   ],
   "source": [
    "df=pd.read_csv(r'C:\\Users\\noopu\\Desktop\\START_FRESH\\Projects\\Python\\Marathon Analysis\\TWO_CENTURIES_OF_UM_RACES.csv', encoding='unicode_escape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "53675371-9470-4b62-bc86-efd13b2e8979",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>4:51:39 h</td>\n",
       "      <td>Tnfrc</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1978.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>10.286</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:15:45 h</td>\n",
       "      <td>Roberto EcheverrÃ­a</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>9.501</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:16:44 h</td>\n",
       "      <td>Puro Trail Osorno</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>9.472</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:34:13 h</td>\n",
       "      <td>Columbia</td>\n",
       "      <td>ARG</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>8.976</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>5:54:14 h</td>\n",
       "      <td>Baguales Trail</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1992.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>8.469</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:25:01 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ARG</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>7.792</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:28:00 h</td>\n",
       "      <td>Los Patagones</td>\n",
       "      <td>ARG</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>7.732</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:32:24 h</td>\n",
       "      <td>Reaktiva Chile</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1967.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>7.645</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:39:08 h</td>\n",
       "      <td>Puro Trail Osorno</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>7.516</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Selva Costera (CHI)</td>\n",
       "      <td>50km</td>\n",
       "      <td>22</td>\n",
       "      <td>6:45:11 h</td>\n",
       "      <td>Marlene Flores Team</td>\n",
       "      <td>CHI</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>7.404</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year of event Event dates           Event name Event distance/length  \\\n",
       "0           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "1           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "2           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "3           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "4           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "5           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "6           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "7           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "8           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "9           2018  06.01.2018  Selva Costera (CHI)                  50km   \n",
       "\n",
       "   Event number of finishers Athlete performance         Athlete club  \\\n",
       "0                         22           4:51:39 h                Tnfrc   \n",
       "1                         22           5:15:45 h  Roberto EcheverrÃ­a   \n",
       "2                         22           5:16:44 h    Puro Trail Osorno   \n",
       "3                         22           5:34:13 h             Columbia   \n",
       "4                         22           5:54:14 h       Baguales Trail   \n",
       "5                         22           6:25:01 h                  NaN   \n",
       "6                         22           6:28:00 h        Los Patagones   \n",
       "7                         22           6:32:24 h       Reaktiva Chile   \n",
       "8                         22           6:39:08 h    Puro Trail Osorno   \n",
       "9                         22           6:45:11 h  Marlene Flores Team   \n",
       "\n",
       "  Athlete country  Athlete year of birth Athlete gender Athlete age category  \\\n",
       "0             CHI                 1978.0              M                  M35   \n",
       "1             CHI                 1981.0              M                  M35   \n",
       "2             CHI                 1987.0              M                  M23   \n",
       "3             ARG                 1976.0              M                  M40   \n",
       "4             CHI                 1992.0              M                  M23   \n",
       "5             ARG                 1974.0              M                  M40   \n",
       "6             ARG                 1979.0              F                  W35   \n",
       "7             CHI                 1967.0              F                  W50   \n",
       "8             CHI                 1985.0              M                  M23   \n",
       "9             CHI                 1976.0              M                  M40   \n",
       "\n",
       "  Athlete average speed  Athlete ID  \n",
       "0                10.286           0  \n",
       "1                 9.501           1  \n",
       "2                 9.472           2  \n",
       "3                 8.976           3  \n",
       "4                 8.469           4  \n",
       "5                 7.792           5  \n",
       "6                 7.732           6  \n",
       "7                 7.645           7  \n",
       "8                 7.516           8  \n",
       "9                 7.404           9  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ed9167f8-223a-4eb9-a66a-bafd868c92e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7461195, 13)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "00f2c503-90ab-4485-8f2e-9480b0c6139b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  int64\n",
       "Event dates                   object\n",
       "Event name                    object\n",
       "Event distance/length         object\n",
       "Event number of finishers      int64\n",
       "Athlete performance           object\n",
       "Athlete club                  object\n",
       "Athlete country               object\n",
       "Athlete year of birth        float64\n",
       "Athlete gender                object\n",
       "Athlete age category          object\n",
       "Athlete average speed         object\n",
       "Athlete ID                     int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7868940f-b4ed-47ed-8258-cb95da28b711",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2538571</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>7:34:19 h</td>\n",
       "      <td>æ¥æ¬é</td>\n",
       "      <td>JPN</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M50</td>\n",
       "      <td>10.627</td>\n",
       "      <td>53107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538572</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>7:43:50 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AUS</td>\n",
       "      <td>1974.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M45</td>\n",
       "      <td>10.409</td>\n",
       "      <td>8785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538573</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>8:04:40 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TPE</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>9.962</td>\n",
       "      <td>4502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538574</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>8:30:49 h</td>\n",
       "      <td>å°ç£å¤§è",
       "³ãé·è·åæ</td>\n",
       "      <td>TPE</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W50</td>\n",
       "      <td>9.452</td>\n",
       "      <td>63964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2538575</th>\n",
       "      <td>2020</td>\n",
       "      <td>07.-09.02.2020</td>\n",
       "      <td>Taipei 48hr Ultra Marathon - 50mi (TPE)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>38</td>\n",
       "      <td>8:34:47 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TPE</td>\n",
       "      <td>1964.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M55</td>\n",
       "      <td>9.379</td>\n",
       "      <td>4485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762404</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>7:36:25 h</td>\n",
       "      <td>AKS Polonia Warszawa</td>\n",
       "      <td>POL</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W35</td>\n",
       "      <td>6.573</td>\n",
       "      <td>860743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762405</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>7:36:27 h</td>\n",
       "      <td>*Warszawa</td>\n",
       "      <td>POL</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W45</td>\n",
       "      <td>6.572</td>\n",
       "      <td>860744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762406</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>7:44:18 h</td>\n",
       "      <td>Outdoor Training</td>\n",
       "      <td>POL</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W23</td>\n",
       "      <td>6.461</td>\n",
       "      <td>860745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762407</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>8:04:50 h</td>\n",
       "      <td>PH Bysewo GdaÅsk</td>\n",
       "      <td>POL</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>6.188</td>\n",
       "      <td>798409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762408</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Bison Ultra-Trail 50 (POL)</td>\n",
       "      <td>50km</td>\n",
       "      <td>271</td>\n",
       "      <td>8:11:43 h</td>\n",
       "      <td>*Nowe Aleksandrowo</td>\n",
       "      <td>POL</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M55</td>\n",
       "      <td>6.101</td>\n",
       "      <td>860746</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63489 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event     Event dates  \\\n",
       "2538571           2020  07.-09.02.2020   \n",
       "2538572           2020  07.-09.02.2020   \n",
       "2538573           2020  07.-09.02.2020   \n",
       "2538574           2020  07.-09.02.2020   \n",
       "2538575           2020  07.-09.02.2020   \n",
       "...                ...             ...   \n",
       "2762404           2020      03.10.2020   \n",
       "2762405           2020      03.10.2020   \n",
       "2762406           2020      03.10.2020   \n",
       "2762407           2020      03.10.2020   \n",
       "2762408           2020      03.10.2020   \n",
       "\n",
       "                                      Event name Event distance/length  \\\n",
       "2538571  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538572  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538573  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538574  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "2538575  Taipei 48hr Ultra Marathon - 50mi (TPE)                  50mi   \n",
       "...                                          ...                   ...   \n",
       "2762404               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762405               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762406               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762407               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "2762408               Bison Ultra-Trail 50 (POL)                  50km   \n",
       "\n",
       "         Event number of finishers Athlete performance  \\\n",
       "2538571                         38           7:34:19 h   \n",
       "2538572                         38           7:43:50 h   \n",
       "2538573                         38           8:04:40 h   \n",
       "2538574                         38           8:30:49 h   \n",
       "2538575                         38           8:34:47 h   \n",
       "...                            ...                 ...   \n",
       "2762404                        271           7:36:25 h   \n",
       "2762405                        271           7:36:27 h   \n",
       "2762406                        271           7:44:18 h   \n",
       "2762407                        271           8:04:50 h   \n",
       "2762408                        271           8:11:43 h   \n",
       "\n",
       "                        Athlete club Athlete country  Athlete year of birth  \\\n",
       "2538571                    æ¥æ¬é             JPN                 1965.0   \n",
       "2538572                          NaN             AUS                 1974.0   \n",
       "2538573                          NaN             TPE                 1976.0   \n",
       "2538574  å°ç£å¤§è\n",
       "³ãé·è·åæ             TPE                 1969.0   \n",
       "2538575                          NaN             TPE                 1964.0   \n",
       "...                              ...             ...                    ...   \n",
       "2762404         AKS Polonia Warszawa             POL                 1981.0   \n",
       "2762405                    *Warszawa             POL                 1970.0   \n",
       "2762406             Outdoor Training             POL                 1993.0   \n",
       "2762407            PH Bysewo GdaÅsk             POL                 1976.0   \n",
       "2762408           *Nowe Aleksandrowo             POL                 1961.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \n",
       "2538571              M                  M50                10.627       53107  \n",
       "2538572              M                  M45                10.409        8785  \n",
       "2538573              M                  M40                 9.962        4502  \n",
       "2538574              F                  W50                 9.452       63964  \n",
       "2538575              M                  M55                 9.379        4485  \n",
       "...                ...                  ...                   ...         ...  \n",
       "2762404              F                  W35                 6.573      860743  \n",
       "2762405              F                  W45                 6.572      860744  \n",
       "2762406              F                  W23                 6.461      860745  \n",
       "2762407              M                  M40                 6.188      798409  \n",
       "2762408              M                  M55                 6.101      860746  \n",
       "\n",
       "[63489 rows x 13 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Event distance/length'].isin(['50km','50mi']) & (df['Year of event']==2020)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9934d402-c860-4827-a805-567b2545136c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51923      USA\n",
       "51924      USA\n",
       "51925      USA\n",
       "51926      USA\n",
       "51927      USA\n",
       "          ... \n",
       "6417091    USA\n",
       "6417092    USA\n",
       "6417093    USA\n",
       "6417094    USA\n",
       "6417095    USA\n",
       "Name: Event name, Length: 338, dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Event name']=='Everglades 50 Mile Ultra Run (USA)']['Event name'].str.split('(').str.get(1).str.split(')').str.get(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fb234262-4da4-460d-aaf1-662e052cbcd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>9:53:05 h</td>\n",
       "      <td>*Middleville, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>8.141</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:09:35 h</td>\n",
       "      <td>*Waterloo, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>7.211</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:33:00 h</td>\n",
       "      <td>*Kitchener, ON</td>\n",
       "      <td>CAN</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>6.967</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:38:17 h</td>\n",
       "      <td>*Utica, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1986.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.914</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2018</td>\n",
       "      <td>06.01.2018</td>\n",
       "      <td>Yankee Springs 50 Mile Winter Challenge (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>9</td>\n",
       "      <td>11:56:35 h</td>\n",
       "      <td>*Grass Lake, MI</td>\n",
       "      <td>USA</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>6.738</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7461181</th>\n",
       "      <td>1995</td>\n",
       "      <td>07.01.1995</td>\n",
       "      <td>Avalon Benefit 50-Mile Run (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>92</td>\n",
       "      <td>11:59:37 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1941.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M50</td>\n",
       "      <td>6709.0</td>\n",
       "      <td>1045603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7461182</th>\n",
       "      <td>1995</td>\n",
       "      <td>07.01.1995</td>\n",
       "      <td>Avalon Benefit 50-Mile Run (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>92</td>\n",
       "      <td>12:01:41 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1932.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M60</td>\n",
       "      <td>6690.0</td>\n",
       "      <td>1070463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7461183</th>\n",
       "      <td>1995</td>\n",
       "      <td>07.01.1995</td>\n",
       "      <td>Avalon Benefit 50-Mile Run (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>92</td>\n",
       "      <td>12:03:26 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1934.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W60</td>\n",
       "      <td>6674.0</td>\n",
       "      <td>416139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7461184</th>\n",
       "      <td>1995</td>\n",
       "      <td>07.01.1995</td>\n",
       "      <td>Avalon Benefit 50-Mile Run (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>92</td>\n",
       "      <td>12:03:26 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1951.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>6674.0</td>\n",
       "      <td>1098098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7461185</th>\n",
       "      <td>1995</td>\n",
       "      <td>07.01.1995</td>\n",
       "      <td>Avalon Benefit 50-Mile Run (USA)</td>\n",
       "      <td>50mi</td>\n",
       "      <td>92</td>\n",
       "      <td>12:05:59 h</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>1947.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W45</td>\n",
       "      <td>6650.0</td>\n",
       "      <td>1626367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1398540 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates  \\\n",
       "55                2018  06.01.2018   \n",
       "56                2018  06.01.2018   \n",
       "57                2018  06.01.2018   \n",
       "58                2018  06.01.2018   \n",
       "59                2018  06.01.2018   \n",
       "...                ...         ...   \n",
       "7461181           1995  07.01.1995   \n",
       "7461182           1995  07.01.1995   \n",
       "7461183           1995  07.01.1995   \n",
       "7461184           1995  07.01.1995   \n",
       "7461185           1995  07.01.1995   \n",
       "\n",
       "                                            Event name Event distance/length  \\\n",
       "55       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "56       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "57       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "58       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "59       Yankee Springs 50 Mile Winter Challenge (USA)                  50mi   \n",
       "...                                                ...                   ...   \n",
       "7461181               Avalon Benefit 50-Mile Run (USA)                  50mi   \n",
       "7461182               Avalon Benefit 50-Mile Run (USA)                  50mi   \n",
       "7461183               Avalon Benefit 50-Mile Run (USA)                  50mi   \n",
       "7461184               Avalon Benefit 50-Mile Run (USA)                  50mi   \n",
       "7461185               Avalon Benefit 50-Mile Run (USA)                  50mi   \n",
       "\n",
       "         Event number of finishers Athlete performance      Athlete club  \\\n",
       "55                               9           9:53:05 h  *Middleville, MI   \n",
       "56                               9          11:09:35 h     *Waterloo, ON   \n",
       "57                               9          11:33:00 h    *Kitchener, ON   \n",
       "58                               9          11:38:17 h        *Utica, MI   \n",
       "59                               9          11:56:35 h   *Grass Lake, MI   \n",
       "...                            ...                 ...               ...   \n",
       "7461181                         92          11:59:37 h               NaN   \n",
       "7461182                         92          12:01:41 h               NaN   \n",
       "7461183                         92          12:03:26 h               NaN   \n",
       "7461184                         92          12:03:26 h               NaN   \n",
       "7461185                         92          12:05:59 h               NaN   \n",
       "\n",
       "        Athlete country  Athlete year of birth Athlete gender  \\\n",
       "55                  USA                 1983.0              M   \n",
       "56                  CAN                 1977.0              F   \n",
       "57                  CAN                 1976.0              M   \n",
       "58                  USA                 1986.0              M   \n",
       "59                  USA                 1988.0              M   \n",
       "...                 ...                    ...            ...   \n",
       "7461181             USA                 1941.0              M   \n",
       "7461182             USA                 1932.0              M   \n",
       "7461183             USA                 1934.0              F   \n",
       "7461184             USA                 1951.0              F   \n",
       "7461185             USA                 1947.0              F   \n",
       "\n",
       "        Athlete age category Athlete average speed  Athlete ID  \n",
       "55                       M23                 8.141          55  \n",
       "56                       W40                 7.211          56  \n",
       "57                       M40                 6.967          57  \n",
       "58                       M23                 6.914          58  \n",
       "59                       M23                 6.738          59  \n",
       "...                      ...                   ...         ...  \n",
       "7461181                  M50                6709.0     1045603  \n",
       "7461182                  M60                6690.0     1070463  \n",
       "7461183                  W60                6674.0      416139  \n",
       "7461184                  W40                6674.0     1098098  \n",
       "7461185                  W45                6650.0     1626367  \n",
       "\n",
       "[1398540 rows x 13 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0)=='USA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "868eaf5f-1ba7-4d05-8d62-add978ff3b9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df[(df['Event distance/length'].isin(['50km','50mi'])) & (df['Year of event']==2020) & (df['Event name'].str.split('(').str.get(1).str.split(')').str.get(0)=='USA')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ad5873e-c08d-415f-a48a-37216d4bcdff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>*Normandy Park, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>*Gold Bar, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>*Vashon, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>M</td>\n",
       "      <td>MU23</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>*Gig Harbor, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>*Bainbridge Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539950</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:42:06 h</td>\n",
       "      <td>*Seattle, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W23</td>\n",
       "      <td>10.635</td>\n",
       "      <td>810282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539951</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:49:20 h</td>\n",
       "      <td>*Camano Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M55</td>\n",
       "      <td>10.369</td>\n",
       "      <td>11739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539952</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:49:50 h</td>\n",
       "      <td>*Clinton, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M45</td>\n",
       "      <td>10.351</td>\n",
       "      <td>80394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539953</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:51:00 h</td>\n",
       "      <td>*Seattle, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>F</td>\n",
       "      <td>W40</td>\n",
       "      <td>10.309</td>\n",
       "      <td>140909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539954</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition (USA)</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>5:02:35 h</td>\n",
       "      <td>*Sammamish, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>9.915</td>\n",
       "      <td>753889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates  \\\n",
       "2539945           2020  02.02.2020   \n",
       "2539946           2020  02.02.2020   \n",
       "2539947           2020  02.02.2020   \n",
       "2539948           2020  02.02.2020   \n",
       "2539949           2020  02.02.2020   \n",
       "2539950           2020  02.02.2020   \n",
       "2539951           2020  02.02.2020   \n",
       "2539952           2020  02.02.2020   \n",
       "2539953           2020  02.02.2020   \n",
       "2539954           2020  02.02.2020   \n",
       "\n",
       "                                            Event name Event distance/length  \\\n",
       "2539945  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539946  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539947  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539948  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539949  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539950  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539951  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539952  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539953  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "2539954  West Seattle Beach Run - Winter Edition (USA)                  50km   \n",
       "\n",
       "         Event number of finishers Athlete performance  \\\n",
       "2539945                         20           3:17:55 h   \n",
       "2539946                         20           4:02:32 h   \n",
       "2539947                         20           4:07:57 h   \n",
       "2539948                         20           4:22:02 h   \n",
       "2539949                         20           4:27:34 h   \n",
       "2539950                         20           4:42:06 h   \n",
       "2539951                         20           4:49:20 h   \n",
       "2539952                         20           4:49:50 h   \n",
       "2539953                         20           4:51:00 h   \n",
       "2539954                         20           5:02:35 h   \n",
       "\n",
       "                   Athlete club Athlete country  Athlete year of birth  \\\n",
       "2539945      *Normandy Park, WA             USA                 1991.0   \n",
       "2539946           *Gold Bar, WA             USA                 1981.0   \n",
       "2539947             *Vashon, WA             USA                 1999.0   \n",
       "2539948         *Gig Harbor, WA             USA                 1983.0   \n",
       "2539949  *Bainbridge Island, WA             USA                 1977.0   \n",
       "2539950            *Seattle, WA             USA                 1985.0   \n",
       "2539951      *Camano Island, WA             USA                 1961.0   \n",
       "2539952            *Clinton, WA             USA                 1970.0   \n",
       "2539953            *Seattle, WA             USA                 1975.0   \n",
       "2539954          *Sammamish, WA             USA                 1979.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \n",
       "2539945              M                  M23                15.158       71287  \n",
       "2539946              M                  M35                12.369      629508  \n",
       "2539947              M                 MU23                12.099       64838  \n",
       "2539948              M                  M35                11.449      704450  \n",
       "2539949              M                  M40                11.212      810281  \n",
       "2539950              F                  W23                10.635      810282  \n",
       "2539951              M                  M55                10.369       11739  \n",
       "2539952              M                  M45                10.351       80394  \n",
       "2539953              F                  W40                10.309      140909  \n",
       "2539954              M                  M40                 9.915      753889  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b63bac2a-f891-4cf8-b2a0-9fd814b583b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26090, 13)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7e1b3918-c457-48bf-9acb-4cba55327d1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\noopu\\AppData\\Local\\Temp\\ipykernel_25416\\2517910487.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['Event name']=df2['Event name'].str.split('(').str.get(0)\n"
     ]
    }
   ],
   "source": [
    "df2['Event name']=df2['Event name'].str.split('(').str.get(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8807ed20-1c43-4042-aee4-0f25a8c58c83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55 h</td>\n",
       "      <td>*Normandy Park, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32 h</td>\n",
       "      <td>*Gold Bar, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57 h</td>\n",
       "      <td>*Vashon, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>M</td>\n",
       "      <td>MU23</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02 h</td>\n",
       "      <td>*Gig Harbor, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34 h</td>\n",
       "      <td>*Bainbridge Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20           3:17:55 h   \n",
       "2539946                  50km                         20           4:02:32 h   \n",
       "2539947                  50km                         20           4:07:57 h   \n",
       "2539948                  50km                         20           4:22:02 h   \n",
       "2539949                  50km                         20           4:27:34 h   \n",
       "\n",
       "                   Athlete club Athlete country  Athlete year of birth  \\\n",
       "2539945      *Normandy Park, WA             USA                 1991.0   \n",
       "2539946           *Gold Bar, WA             USA                 1981.0   \n",
       "2539947             *Vashon, WA             USA                 1999.0   \n",
       "2539948         *Gig Harbor, WA             USA                 1983.0   \n",
       "2539949  *Bainbridge Island, WA             USA                 1977.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \n",
       "2539945              M                  M23                15.158       71287  \n",
       "2539946              M                  M35                12.369      629508  \n",
       "2539947              M                 MU23                12.099       64838  \n",
       "2539948              M                  M35                11.449      704450  \n",
       "2539949              M                  M40                11.212      810281  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4b283099-3f95-4c2b-b6c5-4e08701857ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\noopu\\AppData\\Local\\Temp\\ipykernel_25416\\1405298268.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['athlete_age']= 2020 - df2['Athlete year of birth']\n"
     ]
    }
   ],
   "source": [
    "df2['athlete_age']= 2020 - df2['Athlete year of birth']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bee5aaec-2524-43b4-b29a-9e272ac107b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\noopu\\AppData\\Local\\Temp\\ipykernel_25416\\2382045920.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df2['Athlete performance']=df2['Athlete performance'].str.split(' ').str.get(0)\n"
     ]
    }
   ],
   "source": [
    "df2['Athlete performance']=df2['Athlete performance'].str.split(' ').str.get(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1aa6fcce-1a26-4c97-9757-1a9a3da7c136",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete club</th>\n",
       "      <th>Athlete country</th>\n",
       "      <th>Athlete year of birth</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete age category</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55</td>\n",
       "      <td>*Normandy Park, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M23</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32</td>\n",
       "      <td>*Gold Bar, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57</td>\n",
       "      <td>*Vashon, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>M</td>\n",
       "      <td>MU23</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02</td>\n",
       "      <td>*Gig Harbor, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1983.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M35</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34</td>\n",
       "      <td>*Bainbridge Island, WA</td>\n",
       "      <td>USA</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>M</td>\n",
       "      <td>M40</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20             3:17:55   \n",
       "2539946                  50km                         20             4:02:32   \n",
       "2539947                  50km                         20             4:07:57   \n",
       "2539948                  50km                         20             4:22:02   \n",
       "2539949                  50km                         20             4:27:34   \n",
       "\n",
       "                   Athlete club Athlete country  Athlete year of birth  \\\n",
       "2539945      *Normandy Park, WA             USA                 1991.0   \n",
       "2539946           *Gold Bar, WA             USA                 1981.0   \n",
       "2539947             *Vashon, WA             USA                 1999.0   \n",
       "2539948         *Gig Harbor, WA             USA                 1983.0   \n",
       "2539949  *Bainbridge Island, WA             USA                 1977.0   \n",
       "\n",
       "        Athlete gender Athlete age category Athlete average speed  Athlete ID  \\\n",
       "2539945              M                  M23                15.158       71287   \n",
       "2539946              M                  M35                12.369      629508   \n",
       "2539947              M                 MU23                12.099       64838   \n",
       "2539948              M                  M35                11.449      704450   \n",
       "2539949              M                  M40                11.212      810281   \n",
       "\n",
       "         athlete_age  \n",
       "2539945         29.0  \n",
       "2539946         39.0  \n",
       "2539947         21.0  \n",
       "2539948         37.0  \n",
       "2539949         43.0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "539d1c15-3113-435d-b109-fc1699c023f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df2.drop(['Athlete club','Athlete country','Athlete year of birth','Athlete age category'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "08a6c9e0-18fb-4763-bf47-fdaf03c3901e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20             3:17:55   \n",
       "2539946                  50km                         20             4:02:32   \n",
       "2539947                  50km                         20             4:07:57   \n",
       "2539948                  50km                         20             4:22:02   \n",
       "2539949                  50km                         20             4:27:34   \n",
       "\n",
       "        Athlete gender Athlete average speed  Athlete ID  athlete_age  \n",
       "2539945              M                15.158       71287         29.0  \n",
       "2539946              M                12.369      629508         39.0  \n",
       "2539947              M                12.099       64838         21.0  \n",
       "2539948              M                11.449      704450         37.0  \n",
       "2539949              M                11.212      810281         43.0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5a220ba7-b09d-48d6-8c12-0af1fba66f8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  0\n",
       "Event dates                    0\n",
       "Event name                     0\n",
       "Event distance/length          0\n",
       "Event number of finishers      0\n",
       "Athlete performance            0\n",
       "Athlete gender                 0\n",
       "Athlete average speed          0\n",
       "Athlete ID                     0\n",
       "athlete_age                  233\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5b658150-e698-4e4a-ad78-65b23ed76830",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2547794</th>\n",
       "      <td>2020</td>\n",
       "      <td>25.01.2020</td>\n",
       "      <td>North Carolina Fat Ass 50 Km</td>\n",
       "      <td>50km</td>\n",
       "      <td>57</td>\n",
       "      <td>6:10:30</td>\n",
       "      <td>M</td>\n",
       "      <td>8.097</td>\n",
       "      <td>811923</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551331</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>4:46:34</td>\n",
       "      <td>M</td>\n",
       "      <td>10.469</td>\n",
       "      <td>812656</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551336</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>5:08:36</td>\n",
       "      <td>M</td>\n",
       "      <td>9.721</td>\n",
       "      <td>812657</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551344</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>5:54:04</td>\n",
       "      <td>F</td>\n",
       "      <td>8.473</td>\n",
       "      <td>658221</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2551348</th>\n",
       "      <td>2020</td>\n",
       "      <td>19.01.2020</td>\n",
       "      <td>Big Bend 50 - Fresno Creek 50K</td>\n",
       "      <td>50km</td>\n",
       "      <td>54</td>\n",
       "      <td>6:07:11</td>\n",
       "      <td>M</td>\n",
       "      <td>8.17</td>\n",
       "      <td>812660</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2746543</th>\n",
       "      <td>2020</td>\n",
       "      <td>17.10.2020</td>\n",
       "      <td>Black River Trail Classic 50 Km</td>\n",
       "      <td>50km</td>\n",
       "      <td>8</td>\n",
       "      <td>8:31:26</td>\n",
       "      <td>F</td>\n",
       "      <td>5.866</td>\n",
       "      <td>857251</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2749869</th>\n",
       "      <td>2020</td>\n",
       "      <td>17.10.2020</td>\n",
       "      <td>MuleSkinner Endurance 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>27</td>\n",
       "      <td>11:55:05</td>\n",
       "      <td>M</td>\n",
       "      <td>6.752</td>\n",
       "      <td>857957</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755985</th>\n",
       "      <td>2020</td>\n",
       "      <td>10.10.2020</td>\n",
       "      <td>Man Against Horse 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>23</td>\n",
       "      <td>9:03:25</td>\n",
       "      <td>M</td>\n",
       "      <td>8.885</td>\n",
       "      <td>859462</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755994</th>\n",
       "      <td>2020</td>\n",
       "      <td>10.10.2020</td>\n",
       "      <td>Man Against Horse 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>23</td>\n",
       "      <td>10:37:00</td>\n",
       "      <td>M</td>\n",
       "      <td>7.579</td>\n",
       "      <td>398583</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755997</th>\n",
       "      <td>2020</td>\n",
       "      <td>10.10.2020</td>\n",
       "      <td>Man Against Horse 50 Mile Race</td>\n",
       "      <td>50mi</td>\n",
       "      <td>23</td>\n",
       "      <td>12:30:00</td>\n",
       "      <td>M</td>\n",
       "      <td>6.437</td>\n",
       "      <td>859465</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>233 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                           Event name  \\\n",
       "2547794           2020  25.01.2020        North Carolina Fat Ass 50 Km    \n",
       "2551331           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "2551336           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "2551344           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "2551348           2020  19.01.2020      Big Bend 50 - Fresno Creek 50K    \n",
       "...                ...         ...                                  ...   \n",
       "2746543           2020  17.10.2020     Black River Trail Classic 50 Km    \n",
       "2749869           2020  17.10.2020  MuleSkinner Endurance 50 Mile Race    \n",
       "2755985           2020  10.10.2020      Man Against Horse 50 Mile Race    \n",
       "2755994           2020  10.10.2020      Man Against Horse 50 Mile Race    \n",
       "2755997           2020  10.10.2020      Man Against Horse 50 Mile Race    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2547794                  50km                         57             6:10:30   \n",
       "2551331                  50km                         54             4:46:34   \n",
       "2551336                  50km                         54             5:08:36   \n",
       "2551344                  50km                         54             5:54:04   \n",
       "2551348                  50km                         54             6:07:11   \n",
       "...                       ...                        ...                 ...   \n",
       "2746543                  50km                          8             8:31:26   \n",
       "2749869                  50mi                         27            11:55:05   \n",
       "2755985                  50mi                         23             9:03:25   \n",
       "2755994                  50mi                         23            10:37:00   \n",
       "2755997                  50mi                         23            12:30:00   \n",
       "\n",
       "        Athlete gender Athlete average speed  Athlete ID  athlete_age  \n",
       "2547794              M                 8.097      811923          NaN  \n",
       "2551331              M                10.469      812656          NaN  \n",
       "2551336              M                 9.721      812657          NaN  \n",
       "2551344              F                 8.473      658221          NaN  \n",
       "2551348              M                  8.17      812660          NaN  \n",
       "...                ...                   ...         ...          ...  \n",
       "2746543              F                 5.866      857251          NaN  \n",
       "2749869              M                 6.752      857957          NaN  \n",
       "2755985              M                 8.885      859462          NaN  \n",
       "2755994              M                 7.579      398583          NaN  \n",
       "2755997              M                 6.437      859465          NaN  \n",
       "\n",
       "[233 rows x 10 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[df2['athlete_age'].isna()==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3d788109-8299-4c49-820b-b4d93e003376",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df2.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8cab8528-8e0c-4520-8322-565e9e26dc68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25857, 10)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c9d13a7d-8ea3-428d-b14b-a2d9a22fde68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Year of event, Event dates, Event name, Event distance/length, Event number of finishers, Athlete performance, Athlete gender, Athlete average speed, Athlete ID, athlete_age]\n",
       "Index: []"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[df2.duplicated()==True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "89a2ab38-c4af-47e9-ba48-f90620dbefff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25852</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:07:48</td>\n",
       "      <td>F</td>\n",
       "      <td>7.013</td>\n",
       "      <td>816361</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25853</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:27:22</td>\n",
       "      <td>F</td>\n",
       "      <td>6.706</td>\n",
       "      <td>326469</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25854</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:27:24</td>\n",
       "      <td>F</td>\n",
       "      <td>6.705</td>\n",
       "      <td>372174</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25855</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:38:30</td>\n",
       "      <td>F</td>\n",
       "      <td>6.543</td>\n",
       "      <td>860349</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25856</th>\n",
       "      <td>2020</td>\n",
       "      <td>03.10.2020</td>\n",
       "      <td>Yankee Springs Fall Trail Run Festival</td>\n",
       "      <td>50km</td>\n",
       "      <td>30</td>\n",
       "      <td>7:59:53</td>\n",
       "      <td>M</td>\n",
       "      <td>6.252</td>\n",
       "      <td>770097</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25857 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Year of event Event dates                                Event name  \\\n",
       "0               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "1               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "3               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "4               2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "...              ...         ...                                       ...   \n",
       "25852           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25853           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25854           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25855           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "25856           2020  03.10.2020   Yankee Springs Fall Trail Run Festival    \n",
       "\n",
       "      Event distance/length  Event number of finishers Athlete performance  \\\n",
       "0                      50km                         20             3:17:55   \n",
       "1                      50km                         20             4:02:32   \n",
       "2                      50km                         20             4:07:57   \n",
       "3                      50km                         20             4:22:02   \n",
       "4                      50km                         20             4:27:34   \n",
       "...                     ...                        ...                 ...   \n",
       "25852                  50km                         30             7:07:48   \n",
       "25853                  50km                         30             7:27:22   \n",
       "25854                  50km                         30             7:27:24   \n",
       "25855                  50km                         30             7:38:30   \n",
       "25856                  50km                         30             7:59:53   \n",
       "\n",
       "      Athlete gender Athlete average speed  Athlete ID  athlete_age  \n",
       "0                  M                15.158       71287         29.0  \n",
       "1                  M                12.369      629508         39.0  \n",
       "2                  M                12.099       64838         21.0  \n",
       "3                  M                11.449      704450         37.0  \n",
       "4                  M                11.212      810281         43.0  \n",
       "...              ...                   ...         ...          ...  \n",
       "25852              F                 7.013      816361         62.0  \n",
       "25853              F                 6.706      326469         43.0  \n",
       "25854              F                 6.705      372174         58.0  \n",
       "25855              F                 6.543      860349         39.0  \n",
       "25856              M                 6.252      770097         40.0  \n",
       "\n",
       "[25857 rows x 10 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "39b1c893-2e35-48d1-9de9-6f62bc15479f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  int64\n",
       "Event dates                   object\n",
       "Event name                    object\n",
       "Event distance/length         object\n",
       "Event number of finishers      int64\n",
       "Athlete performance           object\n",
       "Athlete gender                object\n",
       "Athlete average speed         object\n",
       "Athlete ID                     int64\n",
       "athlete_age                  float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4b2ad054-8037-4ded-9bd7-5011f7a95898",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['athlete_age']=df2['athlete_age'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "62e74d7b-8c80-45b5-a01d-c2d9985e2c5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['Athlete average speed']=df2['Athlete average speed'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "92e36f42-118b-4308-9650-c1a922a3d971",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year of event                  int64\n",
       "Event dates                   object\n",
       "Event name                    object\n",
       "Event distance/length         object\n",
       "Event number of finishers      int64\n",
       "Athlete performance           object\n",
       "Athlete gender                object\n",
       "Athlete average speed        float64\n",
       "Athlete ID                     int64\n",
       "athlete_age                    int32\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c4ca88e8-978d-4841-b821-3620123df7fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year of event</th>\n",
       "      <th>Event dates</th>\n",
       "      <th>Event name</th>\n",
       "      <th>Event distance/length</th>\n",
       "      <th>Event number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year of event Event dates                                Event name  \\\n",
       "2539945           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949           2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        Event distance/length  Event number of finishers Athlete performance  \\\n",
       "2539945                  50km                         20             3:17:55   \n",
       "2539946                  50km                         20             4:02:32   \n",
       "2539947                  50km                         20             4:07:57   \n",
       "2539948                  50km                         20             4:22:02   \n",
       "2539949                  50km                         20             4:27:34   \n",
       "\n",
       "        Athlete gender  Athlete average speed  Athlete ID  athlete_age  \n",
       "2539945              M                 15.158       71287           29  \n",
       "2539946              M                 12.369      629508           39  \n",
       "2539947              M                 12.099       64838           21  \n",
       "2539948              M                 11.449      704450           37  \n",
       "2539949              M                 11.212      810281           43  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "72dffbae-75d7-4d37-90a5-81040539d48d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#rename columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "85ce3376-3c71-4c22-8dd8-26a5b2d95cb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Year of event                  int64\n",
    "#Event dates                   object\n",
    "#Event name                    object\n",
    "#Event distance/length         object\n",
    "#Event number of finishers      int64\n",
    "#Athlete performance           object\n",
    "#Athlete gender                object\n",
    "#Athlete average speed        float64\n",
    "#Athlete ID                     int64\n",
    "#athlete_age                    int32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9698d221-d8ab-48b6-b3d3-cf91f3b18852",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.rename(columns={'Year of event':'year','Event dates':'race_day','Event name':'race name','Event distance/length':'race length','Event number of finishers':'race_number of finishers'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8581b77d-2d39-4e95-a33b-33d6d709b5b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>race_day</th>\n",
       "      <th>race name</th>\n",
       "      <th>race length</th>\n",
       "      <th>race_number of finishers</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>Athlete average speed</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>athlete_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>3:17:55</td>\n",
       "      <td>M</td>\n",
       "      <td>15.158</td>\n",
       "      <td>71287</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:02:32</td>\n",
       "      <td>M</td>\n",
       "      <td>12.369</td>\n",
       "      <td>629508</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:07:57</td>\n",
       "      <td>M</td>\n",
       "      <td>12.099</td>\n",
       "      <td>64838</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:22:02</td>\n",
       "      <td>M</td>\n",
       "      <td>11.449</td>\n",
       "      <td>704450</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>2020</td>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>4:27:34</td>\n",
       "      <td>M</td>\n",
       "      <td>11.212</td>\n",
       "      <td>810281</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         year    race_day                                 race name  \\\n",
       "2539945  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539946  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539947  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539948  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "2539949  2020  02.02.2020  West Seattle Beach Run - Winter Edition    \n",
       "\n",
       "        race length  race_number of finishers Athlete performance  \\\n",
       "2539945        50km                        20             3:17:55   \n",
       "2539946        50km                        20             4:02:32   \n",
       "2539947        50km                        20             4:07:57   \n",
       "2539948        50km                        20             4:22:02   \n",
       "2539949        50km                        20             4:27:34   \n",
       "\n",
       "        Athlete gender  Athlete average speed  Athlete ID  athlete_age  \n",
       "2539945              M                 15.158       71287           29  \n",
       "2539946              M                 12.369      629508           39  \n",
       "2539947              M                 12.099       64838           21  \n",
       "2539948              M                 11.449      704450           37  \n",
       "2539949              M                 11.212      810281           43  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f853e3dc-cf14-4398-a843-438765b12562",
   "metadata": {},
   "outputs": [],
   "source": [
    "#rename columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b98b11a0-6d28-44c2-a1bc-aee6c99ef553",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=df2[['race_day','race name','race length','race_number of finishers','Athlete ID','Athlete gender','athlete_age','Athlete performance','Athlete average speed']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f9ab9a05-8109-47b0-850e-119ffd90f78e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race_day</th>\n",
       "      <th>race name</th>\n",
       "      <th>race length</th>\n",
       "      <th>race_number of finishers</th>\n",
       "      <th>Athlete ID</th>\n",
       "      <th>Athlete gender</th>\n",
       "      <th>athlete_age</th>\n",
       "      <th>Athlete performance</th>\n",
       "      <th>Athlete average speed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2539945</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>71287</td>\n",
       "      <td>M</td>\n",
       "      <td>29</td>\n",
       "      <td>3:17:55</td>\n",
       "      <td>15.158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539946</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>629508</td>\n",
       "      <td>M</td>\n",
       "      <td>39</td>\n",
       "      <td>4:02:32</td>\n",
       "      <td>12.369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539947</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>64838</td>\n",
       "      <td>M</td>\n",
       "      <td>21</td>\n",
       "      <td>4:07:57</td>\n",
       "      <td>12.099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539948</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>704450</td>\n",
       "      <td>M</td>\n",
       "      <td>37</td>\n",
       "      <td>4:22:02</td>\n",
       "      <td>11.449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2539949</th>\n",
       "      <td>02.02.2020</td>\n",
       "      <td>West Seattle Beach Run - Winter Edition</td>\n",
       "      <td>50km</td>\n",
       "      <td>20</td>\n",
       "      <td>810281</td>\n",
       "      <td>M</td>\n",
       "      <td>43</td>\n",
       "      <td>4:27:34</td>\n",
       "      <td>11.212</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           race_day                                 race name race length  \\\n",
       "2539945  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539946  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539947  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539948  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "2539949  02.02.2020  West Seattle Beach Run - Winter Edition         50km   \n",
       "\n",
       "         race_number of finishers  Athlete ID Athlete gender  athlete_age  \\\n",
       "2539945                        20       71287              M           29   \n",
       "2539946                        20      629508              M           39   \n",
       "2539947                        20       64838              M           21   \n",
       "2539948                        20      704450              M           37   \n",
       "2539949                        20      810281              M           43   \n",
       "\n",
       "        Athlete performance  Athlete average speed  \n",
       "2539945             3:17:55                 15.158  \n",
       "2539946             4:02:32                 12.369  \n",
       "2539947             4:07:57                 12.099  \n",
       "2539948             4:22:02                 11.449  \n",
       "2539949             4:27:34                 11.212  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7a71e3a9-9d43-49b1-9728-95e70588067a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Charts and Graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b1a87112-4e5a-47ab-8ed7-8244dce68d0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='race length', ylabel='Count'>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df3['race length'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f3378c15-7365-44df-a716-b746e8e5667d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='race length', ylabel='Count'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df3,x='race length', hue = 'Athlete gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "037c9200-9018-45a6-873a-2f9dfcc9ea54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1e9c903ab10>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(df3[df3['race length']=='50mi']['Athlete average speed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0f3cf5b5-cfbe-41a2-9dc2-40f00d1ab714",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='race length', ylabel='Athlete average speed'>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.violinplot(data=df3, x='race length', y='Athlete average speed', hue='Athlete gender',split=True,inner='quart')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "67b18f11-0b02-4b13-ae47-4a61c492d57c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1e9c94afad0>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 614.611x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data=df3, x='athlete_age', y='Athlete average speed',hue='Athlete gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c86594d6-834a-41a8-8283-dc5d3a801429",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Observations from the given data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e871ae63-3fe1-49db-b0b9-a9a3bad3602f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Difference in speed male to female for the 50 k, 50 mi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "0360e00b-be33-42d1-bea5-9d4ac0e4f347",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "race length  Athlete gender\n",
       "50km         F                 7.083011\n",
       "             M                 7.738985\n",
       "50mi         F                 6.834371\n",
       "             M                 7.257633\n",
       "Name: Athlete average speed, dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.groupby(['race length','Athlete gender'])['Athlete average speed'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0afeee7b-ba33-43b0-9b1c-ec7fa24a362e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What age groups are best in 50mi race (min 20+ races)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b3554d9-f4f2-48ef-9980-27bd6f6f1901",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.query('race length == \"50mi\"').groupby('athlete_age')['Athlete average speed'].agg(['mean','count']).sort_values('mean',ascending = False).query('count>19')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aec19f4e-bf0b-4ff7-bf67-02415f354444",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4efc7a74-3a65-4a13-8413-5a3ed111df63",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b8805c6-4782-4120-ad41-4917a20354fb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
